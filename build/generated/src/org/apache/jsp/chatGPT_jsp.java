package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatGPT_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.ArrayList<String>(2);
    _jspx_dependants.add("/allcontent/allcss.jsp");
    _jspx_dependants.add("/allcontent/navbar.jsp");
  }

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("         <link href=\"https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css\" rel=\"stylesheet\">\n");
      out.write("    <!-- Google Fonts Link For Icons -->\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200\" />\n");
      out.write("        <title>chatGPT</title>\n");
      out.write("         ");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> \n");
      out.write("<!--css link from bootstrap4 -->\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"> \n");
      out.write("<!-- fontawesome link from W3Schools -->\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" href=\"css/style.css\">\n");
      out.write("<!--this is all css file from folder css in that style.css -->\n");
      out.write("\n");
      out.write("<!-- This Is Javascript Link From Bootstrap4-->\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\">   \n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"> \n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\">    \n");
      out.write("</script>");
      out.write("\n");
      out.write("        <style>\n");
      out.write("            /* Import Google font - Poppins */\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap');\n");
      out.write("* {\n");
      out.write("  margin: 0;\n");
      out.write("  padding: 0;\n");
      out.write("  box-sizing: border-box;\n");
      out.write("  font-family: \"Poppins\", sans-serif;\n");
      out.write("}\n");
      out.write(":root {\n");
      out.write("  --text-color: #FFFFFF;\n");
      out.write("  --icon-color: #ACACBE;\n");
      out.write("  --icon-hover-bg: #5b5e71;\n");
      out.write("  --placeholder-color: #dcdcdc;\n");
      out.write("  --outgoing-chat-bg: #343541;\n");
      out.write("  --incoming-chat-bg: #444654;\n");
      out.write("  --outgoing-chat-border: #343541;\n");
      out.write("  --incoming-chat-border: #444654;\n");
      out.write("}\n");
      out.write(".light-mode {\n");
      out.write("  --text-color: #343541;\n");
      out.write("  --icon-color: #a9a9bc;\n");
      out.write("  --icon-hover-bg: #f1f1f3;\n");
      out.write("  --placeholder-color: #6c6c6c;\n");
      out.write("  --outgoing-chat-bg: #FFFFFF;\n");
      out.write("  --incoming-chat-bg: #F7F7F8;\n");
      out.write("  --outgoing-chat-border: #FFFFFF;\n");
      out.write("  --incoming-chat-border: #D9D9E3;\n");
      out.write("}\n");
      out.write("body {\n");
      out.write("  background: var(--outgoing-chat-bg);\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Chats container styling */\n");
      out.write(".chat-container {\n");
      out.write("  overflow-y: auto;\n");
      out.write("  max-height: 100vh;\n");
      out.write("  padding-bottom: 150px;\n");
      out.write("}\n");
      out.write(":where(.chat-container, textarea)::-webkit-scrollbar {\n");
      out.write("  width: 6px;\n");
      out.write("}\n");
      out.write(":where(.chat-container, textarea)::-webkit-scrollbar-track {\n");
      out.write("  background: var(--incoming-chat-bg);\n");
      out.write("  border-radius: 25px;\n");
      out.write("}\n");
      out.write(":where(.chat-container, textarea)::-webkit-scrollbar-thumb {\n");
      out.write("  background: var(--icon-color);\n");
      out.write("  border-radius: 25px;\n");
      out.write("}\n");
      out.write(".default-text {\n");
      out.write("  display: flex;\n");
      out.write("  align-items: center;\n");
      out.write("  justify-content: center;\n");
      out.write("  flex-direction: column;\n");
      out.write("  height: 70vh;\n");
      out.write("  padding: 0 10px;\n");
      out.write("  text-align: center;\n");
      out.write("  color: var(--text-color);\n");
      out.write("}\n");
      out.write(".default-text h1 {\n");
      out.write("  font-size: 3.3rem;\n");
      out.write("}\n");
      out.write(".default-text p {\n");
      out.write("  margin-top: 10px;\n");
      out.write("  font-size: 1.1rem;\n");
      out.write("}\n");
      out.write(".chat-container .chat {\n");
      out.write("  padding: 25px 10px;\n");
      out.write("  display: flex;\n");
      out.write("  justify-content: center;\n");
      out.write("  color: var(--text-color);\n");
      out.write("}\n");
      out.write(".chat-container .chat.outgoing {\n");
      out.write("  background: var(--outgoing-chat-bg);\n");
      out.write("  border: 1px solid var(--outgoing-chat-border);\n");
      out.write("}\n");
      out.write(".chat-container .chat.incoming {\n");
      out.write("  background: var(--incoming-chat-bg);\n");
      out.write("  border: 1px solid var(--incoming-chat-border);\n");
      out.write("}\n");
      out.write(".chat .chat-content {\n");
      out.write("  display: flex;\n");
      out.write("  max-width: 1200px;\n");
      out.write("  width: 100%;\n");
      out.write("  align-items: flex-start;\n");
      out.write("  justify-content: space-between;\n");
      out.write("}\n");
      out.write("span.material-symbols-rounded {\n");
      out.write("  user-select: none;\n");
      out.write("  cursor: pointer;\n");
      out.write("}\n");
      out.write(".chat .chat-content span {\n");
      out.write("  cursor: pointer;\n");
      out.write("  font-size: 1.3rem;\n");
      out.write("  color: var(--icon-color);\n");
      out.write("  visibility: hidden;\n");
      out.write("}\n");
      out.write(".chat:hover .chat-content:not(:has(.typing-animation), :has(.error)) span {\n");
      out.write("  visibility: visible;\n");
      out.write("}\n");
      out.write(".chat .chat-details {\n");
      out.write("  display: flex;\n");
      out.write("  align-items: center;\n");
      out.write("}\n");
      out.write(".chat .chat-details img {\n");
      out.write("  width: 35px;\n");
      out.write("  height: 35px;\n");
      out.write("  align-self: flex-start;\n");
      out.write("  object-fit: cover;\n");
      out.write("  border-radius: 2px;\n");
      out.write("}\n");
      out.write(".chat .chat-details p {\n");
      out.write("  white-space: pre-wrap;\n");
      out.write("  font-size: 1.05rem;\n");
      out.write("  padding: 0 50px 0 25px;\n");
      out.write("  color: var(--text-color);\n");
      out.write("  word-break: break-word;\n");
      out.write("}\n");
      out.write(".chat .chat-details p.error {\n");
      out.write("  color: #e55865;\n");
      out.write("}\n");
      out.write(".chat .typing-animation {\n");
      out.write("  padding-left: 25px;\n");
      out.write("  display: inline-flex;\n");
      out.write("}\n");
      out.write(".typing-animation .typing-dot {\n");
      out.write("  height: 7px;\n");
      out.write("  width: 7px;\n");
      out.write("  border-radius: 50%;\n");
      out.write("  margin: 0 3px;\n");
      out.write("  opacity: 0.7;\n");
      out.write("  background: var(--text-color);\n");
      out.write("  animation: animateDots 1.5s var(--delay) ease-in-out infinite;\n");
      out.write("}\n");
      out.write(".typing-animation .typing-dot:first-child {\n");
      out.write("  margin-left: 0;\n");
      out.write("}\n");
      out.write("@keyframes animateDots {\n");
      out.write("  0%,44% {\n");
      out.write("    transform: translateY(0px);\n");
      out.write("  }\n");
      out.write("  28% {\n");
      out.write("    opacity: 0.4;\n");
      out.write("    transform: translateY(-6px);\n");
      out.write("  }\n");
      out.write("  44% {\n");
      out.write("    opacity: 0.2;\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Typing container styling */\n");
      out.write(".typing-container {\n");
      out.write("  position: fixed;\n");
      out.write("  bottom: 0;\n");
      out.write("  width: 100%;\n");
      out.write("  display: flex;\n");
      out.write("  padding: 20px 10px;\n");
      out.write("  justify-content: center;\n");
      out.write("  background: var(--outgoing-chat-bg);\n");
      out.write("  border-top: 1px solid var(--incoming-chat-border);\n");
      out.write("}\n");
      out.write(".typing-container .typing-content {\n");
      out.write("  display: flex;\n");
      out.write("  max-width: 950px;\n");
      out.write("  width: 100%;\n");
      out.write("  align-items: flex-end;\n");
      out.write("}\n");
      out.write(".typing-container .typing-textarea {\n");
      out.write("  width: 100%;\n");
      out.write("  display: flex;\n");
      out.write("  position: relative;\n");
      out.write("}\n");
      out.write(".typing-textarea textarea {\n");
      out.write("  resize: none;\n");
      out.write("  height: 55px;\n");
      out.write("  width: 100%;\n");
      out.write("  border: none;\n");
      out.write("  padding: 15px 45px 15px 20px;\n");
      out.write("  color: var(--text-color);\n");
      out.write("  font-size: 1rem;\n");
      out.write("  border-radius: 4px;\n");
      out.write("  max-height: 250px;\n");
      out.write("  overflow-y: auto;\n");
      out.write("  background: var(--incoming-chat-bg);\n");
      out.write("  outline: 1px solid var(--incoming-chat-border);\n");
      out.write("}\n");
      out.write(".typing-textarea textarea::placeholder {\n");
      out.write("  color: var(--placeholder-color);\n");
      out.write("}\n");
      out.write(".typing-content span {\n");
      out.write("  width: 55px;\n");
      out.write("  height: 55px;\n");
      out.write("  display: flex;\n");
      out.write("  border-radius: 4px;\n");
      out.write("  font-size: 1.35rem;\n");
      out.write("  align-items: center;\n");
      out.write("  justify-content: center;\n");
      out.write("  color: var(--icon-color);\n");
      out.write("}\n");
      out.write(".typing-textarea span {\n");
      out.write("  position: absolute;\n");
      out.write("  right: 0;\n");
      out.write("  bottom: 0;\n");
      out.write("  visibility: hidden;\n");
      out.write("}\n");
      out.write(".typing-textarea textarea:valid ~ span {\n");
      out.write("  visibility: visible;\n");
      out.write("}\n");
      out.write(".typing-controls {\n");
      out.write("  display: flex;\n");
      out.write("}\n");
      out.write(".typing-controls span {\n");
      out.write("  margin-left: 7px;\n");
      out.write("  font-size: 1.4rem;\n");
      out.write("  background: var(--incoming-chat-bg);\n");
      out.write("  outline: 1px solid var(--incoming-chat-border);\n");
      out.write("}\n");
      out.write(".typing-controls span:hover {\n");
      out.write("  background: var(--icon-hover-bg);\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Reponsive Media Query */\n");
      out.write("@media screen and (max-width: 600px) {\n");
      out.write("  .default-text h1 {\n");
      out.write("    font-size: 2.3rem;\n");
      out.write("  }\n");
      out.write("  :where(.default-text p, textarea, .chat p) {\n");
      out.write("    font-size: 0.95rem!important;\n");
      out.write("  }\n");
      out.write("  .chat-container .chat {\n");
      out.write("    padding: 20px 10px;\n");
      out.write("  }\n");
      out.write("  .chat-container .chat img {\n");
      out.write("    height: 32px;\n");
      out.write("    width: 32px;\n");
      out.write("  }\n");
      out.write("  .chat-container .chat p {\n");
      out.write("    padding: 0 20px;\n");
      out.write("  }\n");
      out.write("  .chat .chat-content:not(:has(.typing-animation), :has(.error)\n");
      out.write("  ) span {\n");
      out.write("    visibility: visible;\n");
      out.write("  }\n");
      out.write("  .typing-container {\n");
      out.write("    padding: 15px 10px;\n");
      out.write("  }\n");
      out.write("  .typing-textarea textarea {\n");
      out.write("    height: 45px;\n");
      out.write("    padding: 10px 40px 10px 10px;\n");
      out.write("  }\n");
      out.write("  .typing-content span {\n");
      out.write("    height: 45px;\n");
      out.write("    width: 45px;\n");
      out.write("    margin-left: 5px;\n");
      out.write("  }\n");
      out.write("  span.material-symbols-rounded {\n");
      out.write("    font-size: 1.25rem!important;\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("        </style>\n");
      out.write("       \n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("    ");
      out.write("<!--<style>\n");
      out.write("   .bg-custom\n");
      out.write("    {\n");
      out.write("        background:#03e9f4;\n");
      out.write("    }\n");
      out.write("</style>-->\n");
      out.write("\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-dark bg-custom navbar-custom\">\n");
      out.write("    <a class=\"navbar-brand\" href=\"#\"><i class=\"fa fa-graduation-cap\" aria-hidden=\"true\"></i><strong>E</strong>Notes</a>\n");
      out.write("  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n");
      out.write("    <span class=\"navbar-toggler-icon\"></span>\n");
      out.write("  </button>\n");
      out.write("\n");
      out.write("      \n");
      out.write("      ");

        String user=(String)session.getAttribute("name");
        String role=(String)session.getAttribute("role");
        if(role!=null)
        {
            if(role.equals("user"))
            {
      
      out.write("\n");
      out.write("      <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n");
      out.write("    <ul class=\"navbar-nav mr-auto\">\n");
      out.write("      <li class=\"nav-item active\">\n");
      out.write("          <!-- Icons Are Taken From Fontawesome 4-->\n");
      out.write("          <a class=\"nav-link\" href=\"home.jsp\"></i><i class=\"fa fa-home\" aria-hidden=\"true\"></i>Home <span class=\"sr-only\">(current)</span></a>\n");
      out.write("      </li>\n");
      out.write("      <li class=\"nav-item\">\n");
      out.write("        <a class=\"nav-link\" href=\"addnotes.jsp\"><i class=\"fa fa-plus-circle\" aria-hidden=\"true\"></i>\n");
      out.write("        Add Notes</a>\n");
      out.write("      </li>\n");
      out.write("      <li class=\"nav-item\">\n");
      out.write("        <a class=\"nav-link \" href=\"shownotes.jsp\"><i class=\"fa fa-address-book-o\" aria-hidden=\"true\"></i> Show Notes</a>\n");
      out.write("      </li>\n");
      out.write("       <li class=\"nav-item\">\n");
      out.write("        <a class=\"nav-link \" href=\"chatGPT.jsp\"><i class=\"fa fa-address-chat-o\" aria-hidden=\"true\"></i> ChatGPT</a>\n");
      out.write("      </li>\n");
      out.write("\n");
      out.write("     \n");
      out.write("    </ul>\n");
      out.write("          \n");
      out.write("      \n");
      out.write("    <div style=\"display:-webkit-inline-box;\">\n");
      out.write("      <!--<a href=\"#\" class=\"btn btn-light my-2 my-sm-0 mr-2\" type=\"submit\"><i class=\"fa fa-user-circle\" aria-hidden=\"true\"></i> </a>-->\n");
      out.write("<h3 style=\"margin-right:20px;margin-top:4px;  font-weight:900;color: white\"> WELCOME ");
      out.print( user );
      out.write("</h3> \n");
      out.write("      <a href=\"logout\"class=\"btn btn-light my-2 my-sm-0\" type=\"submit\"><i class=\"fa fa-sign-out\" aria-hidden=\"true\"></i>Logout</a>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("      ");

          
        }
        else if(role.equals("admin"))
        {
      
      out.write("\n");
      out.write("                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n");
      out.write("                <ul class=\"navbar-nav mr-auto\">\n");
      out.write("                <li class=\"nav-item active\">\n");
      out.write("                <!-- Icons Are Taken From Fontawesome 4-->\n");
      out.write("                <a class=\"nav-link\" href=\"home.jsp\"></i><i class=\"fa fa-home\" aria-hidden=\"true\"></i>Home <span class=\"sr-only\">(current)</span></a>\n");
      out.write("                </li>\n");
      out.write("                <li class=\"nav-item\">\n");
      out.write("                <a class=\"nav-link\" href=\"users.jsp\"><i class=\"fa fa-plus-circle\" aria-hidden=\"true\"></i>\n");
      out.write("                USERS</a>\n");
      out.write("<!--                </li>\n");
      out.write("                <li class=\"nav-item\">\n");
      out.write("                <a class=\"nav-link \" href=\"review.jsp\"><i class=\"fa fa-address-book-o\" aria-hidden=\"true\"></i> REVIEWS</a>\n");
      out.write("                </li>-->\n");
      out.write("\n");
      out.write("                </ul>\n");
      out.write("\n");
      out.write("\n");
      out.write("                <div style=\"display:-webkit-inline-box;\">\n");
      out.write("                <!--<a href=\"#\" class=\"btn btn-light my-2 my-sm-0 mr-2\" type=\"submit\"><i class=\"fa fa-user-circle\" aria-hidden=\"true\"></i> </a>-->\n");
      out.write("                <h3 style=\"margin-right:20px;margin-top:4px;  font-weight:900\"> WELCOME ");
      out.print( user );
      out.write("</h3> \n");
      out.write("                <a href=\"logout\"class=\"btn btn-light my-2 my-sm-0\" type=\"submit\"><i class=\"fa fa-sign-out\" aria-hidden=\"true\"></i>Logout</a>\n");
      out.write("                </div>\n");
      out.write("                </div>\n");
      out.write("      ");
  
        }
    }   
       else

        {

      
      out.write("\n");
      out.write("  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n");
      out.write("    <ul class=\"navbar-nav mr-auto\">\n");
      out.write("      <li class=\"nav-item active\">\n");
      out.write("          <!-- Icons Are Taken From Fontawesome 4-->\n");
      out.write("          <a class=\"nav-link\" href=\"index.jsp\"></i><i class=\"fa fa-home\" aria-hidden=\"true\"></i>Home <span class=\"sr-only\">(current)</span></a>\n");
      out.write("      </li>\n");
      out.write("<!--      <li class=\"nav-item\">\n");
      out.write("        <a class=\"nav-link\" href=\"#\"><i class=\"fa fa-plus-circle\" aria-hidden=\"true\"></i>\n");
      out.write("        Add Notes</a>\n");
      out.write("      </li>\n");
      out.write("      <li class=\"nav-item\">\n");
      out.write("        <a class=\"nav-link \" href=\"#\"><i class=\"fa fa-address-book-o\" aria-hidden=\"true\"></i> Show Notes</a>\n");
      out.write("      </li>-->\n");
      out.write("    </ul>\n");
      out.write("\n");
      out.write("    <div>\n");
      out.write("      <a href=\"login.jsp\" class=\"btn btn-light my-2 my-sm-0 mr-2\" type=\"submit\"><i class=\"fa fa-user-circle\" aria-hidden=\"true\"></i>Login</a>\n");
      out.write("      <a href=\"register.jsp\"class=\"btn btn-light my-2 my-sm-0\" type=\"submit\"><i class=\"fa fa-user-plus\" aria-hidden=\"true\"></i>Register</a>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write(" \n");
      out.write("      ");
  
        }
       
      out.write("\n");
      out.write(" \n");
      out.write("      \n");
      out.write("</nav>\n");
      out.write(" ");
      out.write("\n");
      out.write("        <!-- Chats container -->\n");
      out.write("    <div class=\"chat-container\"></div>\n");
      out.write("    \n");
      out.write("    <!-- Typing container -->\n");
      out.write("    <div class=\"typing-container\">\n");
      out.write("      <div class=\"typing-content\">\n");
      out.write("        <div class=\"typing-textarea\">\n");
      out.write("          <textarea id=\"chat-input\" spellcheck=\"false\" placeholder=\"Enter a prompt here\" required></textarea>\n");
      out.write("          <span id=\"send-btn\" class=\"material-symbols-rounded\">send</span>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"typing-controls\">\n");
      out.write("          <span id=\"theme-btn\" class=\"material-symbols-rounded\">light_mode</span>\n");
      out.write("          <span id=\"delete-btn\" class=\"material-symbols-rounded\">delete</span>\n");
      out.write("          <span id=\"mic-btn\" ><i class=\"ri-mic-fill\"></i></span>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("        \n");
      out.write("        <script>\n");
      out.write("             const chatInput = document.querySelector(\"#chat-input\");\n");
      out.write("const sendButton = document.querySelector(\"#send-btn\");\n");
      out.write("const chatContainer = document.querySelector(\".chat-container\");\n");
      out.write("const themeButton = document.querySelector(\"#theme-btn\");\n");
      out.write("const deleteButton = document.querySelector(\"#delete-btn\");\n");
      out.write("const micButton = document.querySelector(\"#mic-btn\");\n");
      out.write("\n");
      out.write("let userText = null;\n");
      out.write("const API_KEY = \"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\"; // Paste your API key here\n");
      out.write("\n");
      out.write("const loadDataFromLocalstorage = () => {\n");
      out.write("    // Load saved chats and theme from local storage and apply/add on the page\n");
      out.write("    const themeColor = localStorage.getItem(\"themeColor\");\n");
      out.write("\n");
      out.write("    document.body.classList.toggle(\"light-mode\", themeColor === \"light_mode\");\n");
      out.write("    themeButton.innerText = document.body.classList.contains(\"light-mode\") ? \"dark_mode\" : \"light_mode\";\n");
      out.write("\n");
      out.write("    const defaultText = `<div class=\"default-text\">\n");
      out.write("                            <h1>ChatGPT Clone</h1>\n");
      out.write("                            <p>Start a conversation and explore the power of AI.<br> Your chat history will be displayed here.</p>\n");
      out.write("                        </div>`\n");
      out.write("\n");
      out.write("    chatContainer.innerHTML = localStorage.getItem(\"all-chats\") || defaultText;\n");
      out.write("    chatContainer.scrollTo(0, chatContainer.scrollHeight); // Scroll to bottom of the chat container\n");
      out.write("}\n");
      out.write("\n");
      out.write("const createChatElement = (content, className) => {\n");
      out.write("    // Create new div and apply chat, specified class and set html content of div\n");
      out.write("    const chatDiv = document.createElement(\"div\");\n");
      out.write("    chatDiv.classList.add(\"chat\", className);\n");
      out.write("    chatDiv.innerHTML = content;\n");
      out.write("    return chatDiv; // Return the created chat div\n");
      out.write("}\n");
      out.write("\n");
      out.write("const getChatResponse = async (incomingChatDiv) => {\n");
      out.write("    // const API_URL = \"https://api.openai.com/v1/chat/completions\";\n");
      out.write("    const API_URL = \"https://api.openai.com/v1/chat/completions\";\n");
      out.write("\n");
      out.write("    const pElement = document.createElement(\"p\");\n");
      out.write("\n");
      out.write("    // Define the properties and data for the API request\n");
      out.write("    const requestOptions = {\n");
      out.write("        method: \"POST\",\n");
      out.write("        headers: {\n");
      out.write("            \"Content-Type\": \"application/json\",\n");
      out.write("            \"Authorization\": `Bearer ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${API_KEY}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("`\n");
      out.write("        },\n");
      out.write("        body: JSON.stringify({\n");
      out.write("            model: \"gpt-3.5-turbo\",\n");
      out.write("            messages: [\n");
      out.write("                {\n");
      out.write("                    role: \"system\",\n");
      out.write("                    content: \"You are a helpful assistant.\"\n");
      out.write("                },\n");
      out.write("                {\n");
      out.write("                    role: \"user\",\n");
      out.write("                    content: userText\n");
      out.write("                }\n");
      out.write("            ]\n");
      out.write("        })\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Send POST request to API, get response and set the reponse as paragraph element text\n");
      out.write("    try {\n");
      out.write("        const response = await (await fetch(API_URL, requestOptions)).json();\n");
      out.write("        const message = response.choices[0].message.content;\n");
      out.write("        pElement.textContent = message.trim();\n");
      out.write("    } catch (error) { // Add error class to the paragraph element and set error text\n");
      out.write("        pElement.classList.add(\"error\");\n");
      out.write("        pElement.textContent = \"Oops! Something went wrong while retrieving the response. Please try again.\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Remove the typing animation, append the paragraph element and save the chats to local storage\n");
      out.write("    incomingChatDiv.querySelector(\".typing-animation\").remove();\n");
      out.write("    incomingChatDiv.querySelector(\".chat-details\").appendChild(pElement);\n");
      out.write("    localStorage.setItem(\"all-chats\", chatContainer.innerHTML);\n");
      out.write("    chatContainer.scrollTo(0, chatContainer.scrollHeight);\n");
      out.write("}\n");
      out.write("\n");
      out.write("const showTypingAnimation = () => {\n");
      out.write("    // Display the typing animation and call the getChatResponse function\n");
      out.write("    const html = `<div class=\"chat-content\">\n");
      out.write("                    <div class=\"chat-details\">\n");
      out.write("                        <img src=\"images/chatbot.jpg\" alt=\"chatbot-img\">\n");
      out.write("                        <div class=\"typing-animation\">\n");
      out.write("                            <div class=\"typing-dot\" style=\"--delay: 0.2s\"></div>\n");
      out.write("                            <div class=\"typing-dot\" style=\"--delay: 0.3s\"></div>\n");
      out.write("                            <div class=\"typing-dot\" style=\"--delay: 0.4s\"></div>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                    <span onclick=\"copyResponse(this)\" class=\"material-symbols-rounded\">content_copy</span>\n");
      out.write("                </div>`;\n");
      out.write("    // Create an incoming chat div with typing animation and append it to chat container\n");
      out.write("    const incomingChatDiv = createChatElement(html, \"incoming\");\n");
      out.write("    chatContainer.appendChild(incomingChatDiv);\n");
      out.write("    chatContainer.scrollTo(0, chatContainer.scrollHeight);\n");
      out.write("    getChatResponse(incomingChatDiv);\n");
      out.write("}\n");
      out.write("\n");
      out.write("const handleOutgoingChat = () => {\n");
      out.write("    userText = chatInput.value.trim(); // Get chatInput value and remove extra spaces\n");
      out.write("    if(!userText) return; // If chatInput is empty return from here\n");
      out.write("\n");
      out.write("    // Clear the input field and reset its height\n");
      out.write("    chatInput.value = \"\";\n");
      out.write("    chatInput.style.height = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${initialInputHeight}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("px`;\n");
      out.write("\n");
      out.write("    const html = `<div class=\"chat-content\">\n");
      out.write("                    <div class=\"chat-details\">\n");
      out.write("                        <img src=\"images/user.jpg\" alt=\"user-img\">\n");
      out.write("                        <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${userText}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("</p>\n");
      out.write("                    </div>\n");
      out.write("                </div>`;\n");
      out.write("\n");
      out.write("    // Create an outgoing chat div with user's message and append it to chat container\n");
      out.write("    const outgoingChatDiv = createChatElement(html, \"outgoing\");\n");
      out.write("    chatContainer.querySelector(\".default-text\")?.remove();\n");
      out.write("    chatContainer.appendChild(outgoingChatDiv);\n");
      out.write("    chatContainer.scrollTo(0, chatContainer.scrollHeight);\n");
      out.write("    setTimeout(showTypingAnimation, 500);\n");
      out.write("}\n");
      out.write("micButton.addEventListener(\"click\", () =>{\n");
      out.write("    const startButton = document.getElementById('startButton');\n");
      out.write("    const resultText = document.getElementById('resultText');\n");
      out.write("    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n");
      out.write("\n");
      out.write("    if (SpeechRecognition) {\n");
      out.write("      const recognition = new SpeechRecognition();\n");
      out.write("\n");
      out.write("      recognition.lang = 'en-IN'; // Set the language to English (India)\n");
      out.write("      recognition.start();\n");
      out.write("      recognition.onstart = () => {\n");
      out.write("        micButton.style.background =\"red\"\n");
      out.write("        // startButton.textContent = 'Listening...';\n");
      out.write("      };\n");
      out.write("\n");
      out.write("      recognition.onresult = (event) => {\n");
      out.write("        const transcript = event.results[0][0].transcript;\n");
      out.write("        chatInput.textContent = transcript;\n");
      out.write("      };\n");
      out.write("\n");
      out.write("      recognition.onend = () => {\n");
      out.write("        micButton.style.background =\"#5B5E71\"\n");
      out.write("        // startButton.textContent = 'Start Listening';\n");
      out.write("      };\n");
      out.write("\n");
      out.write("    //   startButton.addEventListener('click', () => {\n");
      out.write("        \n");
      out.write("    //   });\n");
      out.write("    } else {\n");
      out.write("      resultText.textContent = \"Speech recognition is not supported by this browser.\";\n");
      out.write("    }\n");
      out.write("})\n");
      out.write("\n");
      out.write("deleteButton.addEventListener(\"click\", () => {\n");
      out.write("    // Remove the chats from local storage and call loadDataFromLocalstorage function\n");
      out.write("    if(confirm(\"Are you sure you want to delete all the chats?\")) {\n");
      out.write("        localStorage.removeItem(\"all-chats\");\n");
      out.write("        loadDataFromLocalstorage();\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("\n");
      out.write("themeButton.addEventListener(\"click\", () => {\n");
      out.write("    // Toggle body's class for the theme mode and save the updated theme to the local storage \n");
      out.write("    document.body.classList.toggle(\"light-mode\");\n");
      out.write("    localStorage.setItem(\"themeColor\", themeButton.innerText);\n");
      out.write("    themeButton.innerText = document.body.classList.contains(\"light-mode\") ? \"dark_mode\" : \"light_mode\";\n");
      out.write("});\n");
      out.write("\n");
      out.write("const initialInputHeight = chatInput.scrollHeight;\n");
      out.write("\n");
      out.write("chatInput.addEventListener(\"input\", () => {   \n");
      out.write("    // Adjust the height of the input field dynamically based on its content\n");
      out.write("    chatInput.style.height =  `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${initialInputHeight}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("px`;\n");
      out.write("    chatInput.style.height = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${chatInput.scrollHeight}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("px`;\n");
      out.write("});\n");
      out.write("\n");
      out.write("chatInput.addEventListener(\"keydown\", (e) => {\n");
      out.write("    // If the Enter key is pressed without Shift and the window width is larger \n");
      out.write("    // than 800 pixels, handle the outgoing chat\n");
      out.write("    if (e.key === \"Enter\" && !e.shiftKey && window.innerWidth > 800) {\n");
      out.write("        e.preventDefault();\n");
      out.write("        handleOutgoingChat();\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("\n");
      out.write("loadDataFromLocalstorage();\n");
      out.write("sendButton.addEventListener(\"click\", handleOutgoingChat);\n");
      out.write("            \n");
      out.write("</script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
